// FaceDetect.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <math.h>

//#include "conio.h"

#include "NeuralNet.h"
#include "ImageUtil.h"
#include "FaceDetect.h"


void CorrigeIllumination(float *ImageWindow, Byte *Mask) {
    float    LightingCorrectionMatrix[3] =    {(1.0/7400.0), (1.0/9040.0), (1.0/320.0)};
    float    vec[3] = {0.0, 0.0, 0.0};   // Part of affine fitting
    float    halfX = (MASK_WIDTH-1)/2.0;
    float    halfY = (MASK_HEIGHT-1)/2.0;
    float    xi, yi;
    int      i;

    // Calcul la fonction affine - Étape 1
    for (i = 0; i < MASK_SIZE; i++) {
        xi = ((float)(i % MASK_WIDTH)) - halfX;
        yi = ((float)(i / MASK_WIDTH)) - halfY;
        if (Mask[i] > 0) {
            vec[0] += (float) (xi*ImageWindow[i]);
            vec[1] += (float) (yi*ImageWindow[i]);
            vec[2] += (float) (ImageWindow[i]);
        }
    }

    // Calcul la fonction affine - Étape2
    for (i = 0; i < 3; i++)
        vec[i] = LightingCorrectionMatrix[i]*vec[i];

    // Applique la correction affine
    for (i = 0; i < MASK_SIZE; i++) {
        xi = ((float)(i % MASK_WIDTH)) - halfX;
        yi = ((float)(i / MASK_WIDTH)) - halfY;
        ImageWindow[i] = (float) floor(ImageWindow[i] - (xi*vec[0] + yi*vec[1] + vec[2] - 128.5));
        ImageWindow[i] = (ImageWindow[i] < 0.0) ? 0.0 : ((ImageWindow[i] > 255.0) ? 255.0 : ImageWindow[i]);
    }

}


void EgaliseHistogramme(float *ImageWindow, Byte *Mask) {
    long    hist[256];
    double  scaleFactor;
    long    total, min;
    int     i;

    // Calcul l'histogramme
    memset(hist, 0, 256*sizeof(long));
    for (i = 0; i < MASK_SIZE; i++)
        if (Mask[i] > 0)
            hist[(Byte)(ImageWindow[i])]++;

    // Calcul l'histogramme-cumulatif
    total = 0;
    min = -1;
    for (i = 0; i < 256; i++) {
        if ((min < 0)&&(hist[i] > 0))
            min = hist[i];
        total += hist[i];
        hist[i] = total;
    }

    // Applique l'égalisation d'histogramme
    if (total > min) {
        scaleFactor = 255.0/(total-min);
        for (i = 0; i < MASK_SIZE; i++)
            ImageWindow[i] = (float) floor((float) ((hist[(Byte)(ImageWindow[i])]-min)*scaleFactor));
    }
}


#if REDUCTION_BILINEAR == 1
Byte *ReduceImageBilinear(Byte *Image, int *Width, int *Height, float scale) {
    Byte   *NewImage;
    int     NewWidth, NewHeight;
    float   Ux[2], Uy[2];
    float   kx, ky, kkx, kky;
    float   tp1, tp2;
    int     x, y, x1, y1;
    long    xy, x1y1;
    int     i, j;

    if (scale <= 1.0f)
        return NULL;

    NewWidth   = (int) ((*Width)/scale);
    NewWidth  += (((*Width)-((int)(NewWidth*scale))) == 1) ? -1 : 0;
    NewHeight  = (int) ((*Height)/scale);
    NewHeight += (((*Height)-((int)(NewHeight*scale))) == 1) ? -1 : 0;
    NewImage   = (Byte *) malloc(NewWidth*NewHeight);

    for (y = 0; y < NewHeight; y++) {
        ky = scale*(y+1);
        y1 = (int) ky;
        if (y1+1 >= (*Height))
            break;
        kky = ky - y1;
        Uy[0] = 1.0 - kky;
        Uy[1] = kky;
        for (x = 0; x < NewWidth; x++) {
            kx = scale*(x+1);
            x1 = (int) kx;
            if (x1+1 >= (*Width))
                break;
            kkx = kx - x1;
            Ux[0] = 1.0 - kkx;
            Ux[1] = kkx;
            x1y1 = ((long)y1)*(*Width)+((long)x1);
            tp1 = 0.0f;
            for (i = 0; i <= 1; i++) {
                tp2 = 0.0;
                for (j = 0; j <= 1; j++) {
                    x1y1 = ((long)y1+i)*(*Width)+((long)x1+j);
                    tp2 +=    Image[x1y1]*Ux[j];
                }
                tp1 += Uy[i]*tp2;
            }
            xy     = ((long)y)*NewWidth+((long)x);
            NewImage[xy] = (tp1 < 0.0) ? 0 : ((tp1 > 255.0) ? 255 : ((Byte) tp1));
        }
    }
    free(Image);
    Image = NULL;
    *Width = NewWidth;
    *Height = NewHeight;

    return NewImage;
}
#endif


#if REDUCTION_BICUBIC == 1
Byte *ReduceImageBicubic(Byte *Image, int *Width, int *Height, float scale) {
    Byte   *NewImage;
    int     NewWidth, NewHeight;
    float   Q[4][4] = {{-0.5, 1.0, -0.5, 0.0},{1.5,-2.5,0.0,1.0},{-1.5,2.0,0.5,0.0},{0.5,-0.5,0.0,0.0}};
    float   Ax[4], Ay[4], Ux[4], Uy[4];
    float   kx, ky, ax, ay;
    float   tp1, tp2;
    int     x, y, x1, y1;
    long    xy, x1y1;
    int     i, j;

    if (scale <= 1.0)
        return NULL;

    NewWidth   = (int) ((*Width)/scale);
    NewWidth  += (((*Width)-((int)(NewWidth*scale))) == 1) ? -2 : -1;
    NewHeight  = (int) ((*Height)/scale);
    NewHeight += (((*Height)-((int)(NewHeight*scale))) == 1) ? -2 : -1;
    NewImage   = (Byte *) malloc(NewWidth*NewHeight);

    for (y = 0; y < NewHeight; y++) {
        ky = scale*(y+1);
        y1 = (int) ky;
        if (y1+2 >= (*Height))
            continue;
        ay = ky-y1;
        Ay[3] = 1.0;
        for (i = 2; i >= 0; i--)
            Ay[i] = Ay[i+1]*ay;
        for (i = 0; i < 4; i++) {
            tp1 = 0.0;
            for (j = 0; j < 4; j++)
                tp1 += Q[i][j]*Ay[j];
            Uy[i] = tp1;
        }
        for (x = 0; x < NewWidth; x++) {
            kx = scale*(x+1);
            x1 = (int) kx;
            if (x1+2 >= (*Width))
                continue;
            ax = kx-x1;
            Ax[3] = 1.0;
            for (i = 2; i >= 0; i--)
                Ax[i] = Ax[i+1]*ax;
            for (i = 0; i < 4; i++) {
                tp1 = 0.0;
                for (j = 0; j < 4; j++)
                    tp1 += Q[i][j]*Ax[j];
                Ux[i] = tp1;
            }
            tp1 = 0.0;
            for (i = -1; i <= 2; i++) {
                tp2 = 0.0;
                for (j = -1; j <= 2; j++) {
                    x1y1 = ((long)y1+i)*(*Width)+((long)x1+j);
                    tp2 +=    Image[x1y1]*Ux[j+1];
                }
                tp1 += Uy[i+1]*tp2;
            }
            xy     = ((long)y)*NewWidth+((long)x);
            NewImage[xy] = (tp1 < 0.0) ? 0 : ((tp1 > 255.0) ? 255 : ((Byte) tp1));
        }
    }
    free(Image);
    Image = NULL;
    *Width = NewWidth;
    *Height = NewHeight;

    return NewImage;
}
#endif




float CalculeNet(Network *Net) {
    double   tp;
    int      i, j;

    for (i = 0; i < Net->numUnits; i++) {
        tp = 0.0;
        for (j = 0; j < Net->NetNeurones[i].numConnections; j++)
            tp += (double) ((Net->NetNeurones[i].WeightVal[j])*(*(Net->NetNeurones[i].InputValp[j])));
        *(Net->NetNeurones[i].OutputValp) = (float) tanh(tp);
//		*(Net->NetNeurones[i].OutputValp) = (float) 1.0/(1.0+exp(-tp));	// Fonction d'activation Sigmoide
    }

    return Net->OutputVal[Net->numUnits-1];
}



int main(int argc, char *argv[]) {
    Network      Net;
    ImageStruct  Image, Mask;
    Byte        *ImageTmp;
    char        *ImageName, *MaskName, *NetName;
    float       *Window;
    int          X, Y, x, y, cX, cY, pos;
    long         xy;
    int          s;

    char    name[256];
    int     Erreur;
    float   Reponse;

    if (argc < 4) {
        printf("Erreur : La commande devrait être :\n");
        printf("            FaceDetect <nom du réseau> <nom du masque> <nom de l'image>\n");
        exit(1);
    }

    NetName   = argv[1];
    MaskName  = argv[2];
    ImageName = argv[3];

    Erreur = LoadNet(NetName, &Net, LOAD_WEIGHT);
    if (Erreur) {
        switch (Erreur) {
            case 1 :    printf("Erreur : Ne peut pas charger le fichier du réseau : %s.net\n", NetName);
                        break;
            case 2 :    printf("Erreur : Ne peut pas charger le fichier du réseau : %s.wet\n", NetName);
                        break;
        }
        exit(1);
    }
    printf("numUnits = %d numGroups = %d numConnections = %d\n",Net.numUnits,Net.numGroups,Net.numConnections);

    Mask.Image = LoadByteImagePgm(MaskName, &Mask.Width, &Mask.Height);
    if (Mask.Image == NULL) {
        printf("Erreur : Ne peut pas charger le fichier de masque : %s.pgm\n", MaskName);
        exit(1);
    }
    printf("Mask (%s) : Width = %d  Height = %d\n", MaskName, Mask.Width, Mask.Height);

    Image.Image = LoadByteImagePgm(ImageName,&Image.Width, &Image.Height);
    if (Image.Image == NULL) {
        printf("Erreur : Ne peut pas charger le fichier d'image : %s.pgm\n", ImageName);
        exit(1);
    }

printf("\nDépart!\n\n");
    Window = Net.InputVal;
    s = 0;
    do {
        sprintf(name,"%s_In%d",ImageName, s);
        SaveByteImagePgm(name, Image.Image, Image.Width, Image.Height);
        ImageTmp = (Byte *) malloc(Image.Width*Image.Height);
        memcpy(ImageTmp, Image.Image, Image.Width*Image.Height);
        printf("Image (%s) : Width = %d  Height = %d Scale = %d\n", ImageName, Image.Width, Image.Height, s);

        for (Y = 0; Y < Image.Height-Mask.Height; Y++)     // Balaye l'image avec le masque
            for (X = 0; X < Image.Width-Mask.Width; X++) {
                cX = X + Mask.Width/2;                // Coordonnées du centre du masque sur l'image
                cY = Y + Mask.Height/2;
                pos = 0;
                for (y = Y; y < Y+Mask.Height; y++)   // Transfère la portion d'image aux entrées du réseau
                    for (x = X; x < X+Mask.Width; x++) {
                        xy = (y*Image.Width) + x;
                        Window[pos++] = (float) Image.Image[xy];
                    }

                CorrigeIllumination(Window, Mask.Image);
                EgaliseHistogramme(Window, Mask.Image);

                Reponse = CalculeNet(&Net);
                if (Reponse >= 0.98f) {                // S'il y a eu une détection
                    printf("(%d,%d) -> %f\n", cX, cY, Reponse);
                    pos = 0;
                    for (y = Y; y < Y+Mask.Height; y++)    // Dessine le masque sur l'image
                        for (x = X; x < X+Mask.Width; x++) {
                            xy = (y*Image.Width) + x;
                            if (Mask.Image[pos++] == 0)
                                ImageTmp[xy] = 0;
                        }
                }
            }
        sprintf(name,"%s_Out%d",ImageName, s);
        SaveByteImagePgm(name, ImageTmp, Image.Width, Image.Height);
        free(ImageTmp);
        if (s+1 < NUM_SCALE)
#if REDUCTION_BILINEAR == 1
            Image.Image = ReduceImageBilinear(Image.Image, &Image.Width, &Image.Height, REDUCTION_SCALE);
#endif
#if REDUCTION_BICUBIC == 1
            Image.Image = ReduceImageBicubic(Image.Image, &Image.Width, &Image.Height, REDUCTION_SCALE);
#endif
    } while (++s < NUM_SCALE);
    printf("\nFini!\n");

    free(Image.Image);
    free(Mask.Image);

    free(Net.WeightVal);
    free(Net.InputVal);
    free(Net.InputAdr);
    free(Net.NetNeurones);

    return 0;
}
